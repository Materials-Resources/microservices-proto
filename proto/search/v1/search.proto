syntax = 'proto3';

package search.v1;

// Common product fields extracted into a base message
message ProductBase {
  string uid = 1;                // Unique identifier
  string name = 2;              // Product name
  string description = 3;       // Product description
  string serial_number = 4;     // Renamed from 'sn' for clarity
  string product_group_name = 5;  // ID of the associated product group
}

// Pagination and Facet Metadata
message PageMetadata {
  int32 total_records = 1; // Total results across all pages
  int32 current_page = 2;  // Current page being viewed
  int32 total_pages = 3;   // Total number of pages available
}

// Represents a single aggregation result in a bucket
message BucketAggregation {
  string name = 1;   // The name or value of the aggregated item
  int32 count = 2;   // The count or frequency of this item
}

// Contains overall aggregation results for all fields using a map
message Aggregations {
  map<string, Bucket> field_buckets = 1; // Maps field names to their respective buckets
}

// Represents a bucket tied to a field, containing multiple aggregations
message Bucket {
  repeated BucketAggregation aggregations = 1; // List of aggregation results for this field
}

message Filter {
  repeated string values = 1;
}


// Product-related definitions
// Refactored to a single message using ProductBase
message ProductDocument {
  ProductBase base = 1;
}

// Search result product, based on ProductBase
message ProductResult {
  ProductBase base = 1;
}

message Product {
  string id = 1;
  string sn = 2;
  string name = 3;
  string description = 4;
  string product_group_name = 5;
}


service SearchService {
  // SearchProducts returns a list of products based on the search query and filters
  rpc SearchProducts(SearchProductsRequest) returns (SearchProductsResponse);
  // AddProduct indexes a new product to the search engine
  rpc AddProduct(AddProductRequest) returns (AddProductResponse);
}

// Request and Response Definitions for RPCs
message SearchProductsRequest {
  string query = 1;                // Search query
  int32 page = 2;                  // Page number (1-indexed)
  string sort_by = 3;              // Optional sort parameter
  map<string, Filter> filters = 4;               // Optional filters
}

message SearchProductsResponse {
  repeated ProductResult results = 1;
  PageMetadata page_metadata = 2;
  Aggregations aggregations = 3;
}

message AddProductRequest {
  repeated Product products = 1;
}

message AddProductResponse {
  int32 success = 1;
}
