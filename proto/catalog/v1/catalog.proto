syntax = 'proto3';

package catalog.v1;

import "google/protobuf/field_mask.proto";

option go_package = "catalog";

enum DeleteMode {
  DELETE_MODE_UNSPECIFIED = 0;
  DELETE_MODE_SOFT = 1;
  DELETE_MODE_HARD = 2;
}

message ValidationError {
  string field = 1;
  string message = 2;
}

message Cursor {
  oneof direction {
    int64 select_previous = 1; // select previous items using cursor value
    int64 select_next = 2; // select next items using cursor value
  }
  int64 size = 3; // Number of items to return
}

message CursorMetadata {
  int64 previous_cursor = 1; // Cursor value for previous items
  int64 next_cursor = 2; // Cursor value for next items
  int64 total_results = 3; // Total number of results
}

message ProductSupplier {
  string product_id = 1;
  string supplier_id = 2;
  string supplier_sn = 3;
  double list_price = 4;
  double purchase_price = 5;
  bool delete = 6;
}

message Product {
  string uid = 1;
  string sn = 2;
  string name = 3;
  string description = 4;
  ProductGroup product_group = 5;
}

message Price {

  double list_price = 1;

}

message ProductGroup {
  string sn = 1;
  string name = 2;
}



message ProductFilter {
  string product_group_id = 1;
}

service CatalogService {


  // ListProducts returns a List of products
  rpc ListProducts(ListProductsRequest) returns (ListProductsResponse);
  // CreateProduct creates a product
  rpc CreateProduct(CreateProductRequest) returns (CreateProductResponse);
  // GetProduct returns a product
  rpc GetProduct(GetProductRequest) returns (GetProductResponse);
  // UpdateProduct updates a product
  rpc UpdateProduct(UpdateProductRequest) returns (UpdateProductResponse);
  // DeleteProduct deletes a product
  rpc DeleteProduct(DeleteProductRequest) returns (DeleteProductResponse);

  // ListGroups returns a List of product groups
  rpc ListGroups(ListGroupRequest) returns (ListGroupResponse);
  // CreateGroup creates a new product group
  rpc CreateGroup(CreateGroupRequest) returns (CreateGroupResponse);
  // ReadGroup returns a product group with products
  rpc GetGroup(GetGroupRequest) returns (GetGroupResponse);
  // UpdateGroup updates a product group
  rpc UpdateGroup(UpdateGroupRequest) returns (UpdateGroupResponse);
  // DeleteGroup deletes a product group
  rpc DeleteGroup(DeleteGroupRequest) returns (DeleteGroupResponse);

  // ListSuppliers returns a List of suppliers for a product
  rpc ListSuppliers(ListSuppliersRequest) returns (ListSuppliersResponse);
  // GetSupplier returns the supplier of a product
  rpc GetSupplier(GetSupplierRequest) returns (GetSupplierResponse);
  // CreateSupplier creates a supplier for a product
  rpc CreateSupplier(CreateSupplierRequest) returns (CreateSupplierResponse);
  // UpdateSupplier updates a supplier for a product
  rpc UpdateSupplier(UpdateSupplierRequest) returns (UpdateSupplierResponse);
  // SetPrimarySupplier sets the primary supplier for a product
  rpc SetPrimarySupplier(SetPrimarySupplierRequest) returns (SetPrimarySupplierResponse);

  // GetProductBySupplier returns a product by supplier identifiers
  rpc GetProductBySupplier(GetProductBySupplierRequest) returns (GetProductBySupplierResponse);
}

message GetSupplierRequest {
  string product_id = 1;
  string supplier_id = 2;
}

message ListSuppliersRequest {}
message ListSuppliersResponse {
  repeated ProductSupplier product_suppliers = 1;
}

message GetSupplierResponse {
  ProductSupplier product_supplier = 1;
}

message CreateSupplierRequest {
  string product_id = 1;
  string supplier_id = 2;
  string supplier_product_sn = 3;
  double list_price = 4;
  double purchase_price = 5;
}
message CreateSupplierResponse {}

message UpdateSupplierRequest {
  ProductSupplier product_supplier = 1;

  google.protobuf.FieldMask update_mask = 2;
}
message UpdateSupplierResponse {}

message SetPrimarySupplierRequest {
  int32 product_uid = 1;
  double location_id = 2;
  double supplier_id = 3;
  double division_id = 4;
}
message SetPrimarySupplierResponse {}

message CreateProductGroupRequest {
  ProductGroup product_group = 1;
  //  string sn = 1; //Unique identifier of Product Group
  //  string name = 2; // Description of group
}
message CreateProductGroupResponse {
  repeated ValidationError validation_errors = 1;
}

message UpdateProductGroupRequest {
  ProductGroup product_group = 1;
}
message UpdateProductGroupResponse {}

message GetProductBySupplierRequest {
  double supplier_id = 1;
  string supplier_part_no = 2;
}
message GetProductBySupplierResponse {
  string sn = 1;
}

message GetProductRequest {
  string product_uid = 1; // Unique identifier of product
}

message GetProductResponse {
  Product product = 1; // Common product details
}

message ListProductsRequest {
  message Filter {
    enum DeleteFilter {
      DELETE_FILTER_UNSPECIFIED = 0;
      DELETE_FILTER_ALL = 1;
    }
    DeleteFilter delete_status = 1;

  }
  Filter filter = 1;
  Cursor cursor = 2;
}

message ListProductsResponse {
  repeated Product products = 1;
  CursorMetadata cursor_metadata = 2;
}

message CreateProductRequest {}

message CreateProductResponse {}

message UpdateProductRequest {
  message Product {
    google.protobuf.FieldMask update_mask = 1;
    string sn = 2;
    string name = 3;
    string description = 4;
    string product_group_sn = 5;
  }
  string product_uid = 1; // Unique identifier of product
  Product product = 2;
}

message UpdateProductResponse {}

message DeleteProductRequest {
  string product_uid = 1; // Unique identifier of product
  DeleteMode delete_mode = 2;
}

message DeleteProductResponse {}

message ListGroupRequest {}
message ListGroupResponse {
  repeated ProductGroup product_groups = 1;
}
message CreateGroupRequest {
  string sn = 1;
  string name = 2;
}

message CreateGroupResponse {
  repeated ValidationError validation_errors = 1;
}

message GetGroupRequest {
  string sn = 1;
}
message GetGroupResponse {
  ProductGroup product_group = 1;
}

message UpdateGroupRequest {
  message ProductGroup {
    google.protobuf.FieldMask update_mask = 1;
    string name = 2;
  }
  string sn = 1;
  ProductGroup product_group = 2;
}

message UpdateGroupResponse {
  repeated ValidationError validation_errors = 1;
}

message DeleteGroupRequest {
  string sn = 1;
  DeleteMode delete_mode = 2;
}
message DeleteGroupResponse {}
