// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: proto/catalog/v1/catalog.proto

package catalog

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	CatalogService_CustomerGetProduct_FullMethodName   = "/catalog.v1.CatalogService/CustomerGetProduct"
	CatalogService_ClerkListProducts_FullMethodName    = "/catalog.v1.CatalogService/ClerkListProducts"
	CatalogService_ClerkCreateProduct_FullMethodName   = "/catalog.v1.CatalogService/ClerkCreateProduct"
	CatalogService_ClerkReadProduct_FullMethodName     = "/catalog.v1.CatalogService/ClerkReadProduct"
	CatalogService_ClerkUpdateProduct_FullMethodName   = "/catalog.v1.CatalogService/ClerkUpdateProduct"
	CatalogService_ClerkDeleteProduct_FullMethodName   = "/catalog.v1.CatalogService/ClerkDeleteProduct"
	CatalogService_ClerkListGroups_FullMethodName      = "/catalog.v1.CatalogService/ClerkListGroups"
	CatalogService_ClerkCreateGroup_FullMethodName     = "/catalog.v1.CatalogService/ClerkCreateGroup"
	CatalogService_ClerkReadGroup_FullMethodName       = "/catalog.v1.CatalogService/ClerkReadGroup"
	CatalogService_ClerkUpdateGroup_FullMethodName     = "/catalog.v1.CatalogService/ClerkUpdateGroup"
	CatalogService_ClerkDeleteGroup_FullMethodName     = "/catalog.v1.CatalogService/ClerkDeleteGroup"
	CatalogService_ListSuppliers_FullMethodName        = "/catalog.v1.CatalogService/ListSuppliers"
	CatalogService_GetSupplier_FullMethodName          = "/catalog.v1.CatalogService/GetSupplier"
	CatalogService_CreateSupplier_FullMethodName       = "/catalog.v1.CatalogService/CreateSupplier"
	CatalogService_UpdateSupplier_FullMethodName       = "/catalog.v1.CatalogService/UpdateSupplier"
	CatalogService_SetPrimarySupplier_FullMethodName   = "/catalog.v1.CatalogService/SetPrimarySupplier"
	CatalogService_GetProductBySupplier_FullMethodName = "/catalog.v1.CatalogService/GetProductBySupplier"
)

// CatalogServiceClient is the client API for CatalogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CatalogServiceClient interface {
	// CustomerGetProduct returns a product for a customer
	CustomerGetProduct(ctx context.Context, in *CustomerGetProductRequest, opts ...grpc.CallOption) (*CustomerGetProductResponse, error)
	// ClerkListProducts returns a List of products
	ClerkListProducts(ctx context.Context, in *ClerkListProductsRequest, opts ...grpc.CallOption) (*ClerkListProductsResponse, error)
	// ClerkCreateProduct creates a product
	ClerkCreateProduct(ctx context.Context, in *ClerkCreateProductRequest, opts ...grpc.CallOption) (*ClerkCreateProductResponse, error)
	// ClerkGetProduct returns a product
	ClerkReadProduct(ctx context.Context, in *ClerkReadProductRequest, opts ...grpc.CallOption) (*ClerkReadProductResponse, error)
	// ClerkUpdateProduct updates a product
	ClerkUpdateProduct(ctx context.Context, in *ClerkUpdateProductRequest, opts ...grpc.CallOption) (*ClerkUpdateProductResponse, error)
	// ClerkDeleteProduct deletes a product
	ClerkDeleteProduct(ctx context.Context, in *ClerkDeleteProductRequest, opts ...grpc.CallOption) (*ClerkDeleteProductResponse, error)
	// ClerkListGroups returns a List of product groups
	ClerkListGroups(ctx context.Context, in *ClerkListGroupRequest, opts ...grpc.CallOption) (*ClerkListGroupResponse, error)
	// ClerkCreateGroup creates a new product group
	ClerkCreateGroup(ctx context.Context, in *ClerkCreateGroupRequest, opts ...grpc.CallOption) (*ClerkCreateGroupResponse, error)
	// ClerkReadGroup returns a product group with products
	ClerkReadGroup(ctx context.Context, in *ClerkReadGroupRequest, opts ...grpc.CallOption) (*ClerkReadGroupResponse, error)
	// ClerkUpdateGroup updates a product group
	ClerkUpdateGroup(ctx context.Context, in *ClerkUpdateGroupRequest, opts ...grpc.CallOption) (*ClerkUpdateGroupResponse, error)
	// ClerkDeleteGroup deletes a product group
	ClerkDeleteGroup(ctx context.Context, in *ClerkDeleteGroupRequest, opts ...grpc.CallOption) (*ClerkDeleteGroupResponse, error)
	// ListSuppliers returns a List of suppliers for a product
	ListSuppliers(ctx context.Context, in *ListSuppliersRequest, opts ...grpc.CallOption) (*ListSuppliersResponse, error)
	// GetSupplier returns the supplier of a product
	GetSupplier(ctx context.Context, in *GetSupplierRequest, opts ...grpc.CallOption) (*GetSupplierResponse, error)
	// CreateSupplier creates a supplier for a product
	CreateSupplier(ctx context.Context, in *CreateSupplierRequest, opts ...grpc.CallOption) (*CreateSupplierResponse, error)
	// UpdateSupplier updates a supplier for a product
	UpdateSupplier(ctx context.Context, in *UpdateSupplierRequest, opts ...grpc.CallOption) (*UpdateSupplierResponse, error)
	// SetPrimarySupplier sets the primary supplier for a product
	SetPrimarySupplier(ctx context.Context, in *SetPrimarySupplierRequest, opts ...grpc.CallOption) (*SetPrimarySupplierResponse, error)
	// GetProductBySupplier returns a product by supplier identifiers
	GetProductBySupplier(ctx context.Context, in *GetProductBySupplierRequest, opts ...grpc.CallOption) (*GetProductBySupplierResponse, error)
}

type catalogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCatalogServiceClient(cc grpc.ClientConnInterface) CatalogServiceClient {
	return &catalogServiceClient{cc}
}

func (c *catalogServiceClient) CustomerGetProduct(ctx context.Context, in *CustomerGetProductRequest, opts ...grpc.CallOption) (*CustomerGetProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CustomerGetProductResponse)
	err := c.cc.Invoke(ctx, CatalogService_CustomerGetProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) ClerkListProducts(ctx context.Context, in *ClerkListProductsRequest, opts ...grpc.CallOption) (*ClerkListProductsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClerkListProductsResponse)
	err := c.cc.Invoke(ctx, CatalogService_ClerkListProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) ClerkCreateProduct(ctx context.Context, in *ClerkCreateProductRequest, opts ...grpc.CallOption) (*ClerkCreateProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClerkCreateProductResponse)
	err := c.cc.Invoke(ctx, CatalogService_ClerkCreateProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) ClerkReadProduct(ctx context.Context, in *ClerkReadProductRequest, opts ...grpc.CallOption) (*ClerkReadProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClerkReadProductResponse)
	err := c.cc.Invoke(ctx, CatalogService_ClerkReadProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) ClerkUpdateProduct(ctx context.Context, in *ClerkUpdateProductRequest, opts ...grpc.CallOption) (*ClerkUpdateProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClerkUpdateProductResponse)
	err := c.cc.Invoke(ctx, CatalogService_ClerkUpdateProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) ClerkDeleteProduct(ctx context.Context, in *ClerkDeleteProductRequest, opts ...grpc.CallOption) (*ClerkDeleteProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClerkDeleteProductResponse)
	err := c.cc.Invoke(ctx, CatalogService_ClerkDeleteProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) ClerkListGroups(ctx context.Context, in *ClerkListGroupRequest, opts ...grpc.CallOption) (*ClerkListGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClerkListGroupResponse)
	err := c.cc.Invoke(ctx, CatalogService_ClerkListGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) ClerkCreateGroup(ctx context.Context, in *ClerkCreateGroupRequest, opts ...grpc.CallOption) (*ClerkCreateGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClerkCreateGroupResponse)
	err := c.cc.Invoke(ctx, CatalogService_ClerkCreateGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) ClerkReadGroup(ctx context.Context, in *ClerkReadGroupRequest, opts ...grpc.CallOption) (*ClerkReadGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClerkReadGroupResponse)
	err := c.cc.Invoke(ctx, CatalogService_ClerkReadGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) ClerkUpdateGroup(ctx context.Context, in *ClerkUpdateGroupRequest, opts ...grpc.CallOption) (*ClerkUpdateGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClerkUpdateGroupResponse)
	err := c.cc.Invoke(ctx, CatalogService_ClerkUpdateGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) ClerkDeleteGroup(ctx context.Context, in *ClerkDeleteGroupRequest, opts ...grpc.CallOption) (*ClerkDeleteGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClerkDeleteGroupResponse)
	err := c.cc.Invoke(ctx, CatalogService_ClerkDeleteGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) ListSuppliers(ctx context.Context, in *ListSuppliersRequest, opts ...grpc.CallOption) (*ListSuppliersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSuppliersResponse)
	err := c.cc.Invoke(ctx, CatalogService_ListSuppliers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetSupplier(ctx context.Context, in *GetSupplierRequest, opts ...grpc.CallOption) (*GetSupplierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSupplierResponse)
	err := c.cc.Invoke(ctx, CatalogService_GetSupplier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) CreateSupplier(ctx context.Context, in *CreateSupplierRequest, opts ...grpc.CallOption) (*CreateSupplierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSupplierResponse)
	err := c.cc.Invoke(ctx, CatalogService_CreateSupplier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) UpdateSupplier(ctx context.Context, in *UpdateSupplierRequest, opts ...grpc.CallOption) (*UpdateSupplierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSupplierResponse)
	err := c.cc.Invoke(ctx, CatalogService_UpdateSupplier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) SetPrimarySupplier(ctx context.Context, in *SetPrimarySupplierRequest, opts ...grpc.CallOption) (*SetPrimarySupplierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetPrimarySupplierResponse)
	err := c.cc.Invoke(ctx, CatalogService_SetPrimarySupplier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetProductBySupplier(ctx context.Context, in *GetProductBySupplierRequest, opts ...grpc.CallOption) (*GetProductBySupplierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProductBySupplierResponse)
	err := c.cc.Invoke(ctx, CatalogService_GetProductBySupplier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatalogServiceServer is the server API for CatalogService service.
// All implementations should embed UnimplementedCatalogServiceServer
// for forward compatibility
type CatalogServiceServer interface {
	// CustomerGetProduct returns a product for a customer
	CustomerGetProduct(context.Context, *CustomerGetProductRequest) (*CustomerGetProductResponse, error)
	// ClerkListProducts returns a List of products
	ClerkListProducts(context.Context, *ClerkListProductsRequest) (*ClerkListProductsResponse, error)
	// ClerkCreateProduct creates a product
	ClerkCreateProduct(context.Context, *ClerkCreateProductRequest) (*ClerkCreateProductResponse, error)
	// ClerkGetProduct returns a product
	ClerkReadProduct(context.Context, *ClerkReadProductRequest) (*ClerkReadProductResponse, error)
	// ClerkUpdateProduct updates a product
	ClerkUpdateProduct(context.Context, *ClerkUpdateProductRequest) (*ClerkUpdateProductResponse, error)
	// ClerkDeleteProduct deletes a product
	ClerkDeleteProduct(context.Context, *ClerkDeleteProductRequest) (*ClerkDeleteProductResponse, error)
	// ClerkListGroups returns a List of product groups
	ClerkListGroups(context.Context, *ClerkListGroupRequest) (*ClerkListGroupResponse, error)
	// ClerkCreateGroup creates a new product group
	ClerkCreateGroup(context.Context, *ClerkCreateGroupRequest) (*ClerkCreateGroupResponse, error)
	// ClerkReadGroup returns a product group with products
	ClerkReadGroup(context.Context, *ClerkReadGroupRequest) (*ClerkReadGroupResponse, error)
	// ClerkUpdateGroup updates a product group
	ClerkUpdateGroup(context.Context, *ClerkUpdateGroupRequest) (*ClerkUpdateGroupResponse, error)
	// ClerkDeleteGroup deletes a product group
	ClerkDeleteGroup(context.Context, *ClerkDeleteGroupRequest) (*ClerkDeleteGroupResponse, error)
	// ListSuppliers returns a List of suppliers for a product
	ListSuppliers(context.Context, *ListSuppliersRequest) (*ListSuppliersResponse, error)
	// GetSupplier returns the supplier of a product
	GetSupplier(context.Context, *GetSupplierRequest) (*GetSupplierResponse, error)
	// CreateSupplier creates a supplier for a product
	CreateSupplier(context.Context, *CreateSupplierRequest) (*CreateSupplierResponse, error)
	// UpdateSupplier updates a supplier for a product
	UpdateSupplier(context.Context, *UpdateSupplierRequest) (*UpdateSupplierResponse, error)
	// SetPrimarySupplier sets the primary supplier for a product
	SetPrimarySupplier(context.Context, *SetPrimarySupplierRequest) (*SetPrimarySupplierResponse, error)
	// GetProductBySupplier returns a product by supplier identifiers
	GetProductBySupplier(context.Context, *GetProductBySupplierRequest) (*GetProductBySupplierResponse, error)
}

// UnimplementedCatalogServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCatalogServiceServer struct {
}

func (UnimplementedCatalogServiceServer) CustomerGetProduct(context.Context, *CustomerGetProductRequest) (*CustomerGetProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerGetProduct not implemented")
}
func (UnimplementedCatalogServiceServer) ClerkListProducts(context.Context, *ClerkListProductsRequest) (*ClerkListProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClerkListProducts not implemented")
}
func (UnimplementedCatalogServiceServer) ClerkCreateProduct(context.Context, *ClerkCreateProductRequest) (*ClerkCreateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClerkCreateProduct not implemented")
}
func (UnimplementedCatalogServiceServer) ClerkReadProduct(context.Context, *ClerkReadProductRequest) (*ClerkReadProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClerkReadProduct not implemented")
}
func (UnimplementedCatalogServiceServer) ClerkUpdateProduct(context.Context, *ClerkUpdateProductRequest) (*ClerkUpdateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClerkUpdateProduct not implemented")
}
func (UnimplementedCatalogServiceServer) ClerkDeleteProduct(context.Context, *ClerkDeleteProductRequest) (*ClerkDeleteProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClerkDeleteProduct not implemented")
}
func (UnimplementedCatalogServiceServer) ClerkListGroups(context.Context, *ClerkListGroupRequest) (*ClerkListGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClerkListGroups not implemented")
}
func (UnimplementedCatalogServiceServer) ClerkCreateGroup(context.Context, *ClerkCreateGroupRequest) (*ClerkCreateGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClerkCreateGroup not implemented")
}
func (UnimplementedCatalogServiceServer) ClerkReadGroup(context.Context, *ClerkReadGroupRequest) (*ClerkReadGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClerkReadGroup not implemented")
}
func (UnimplementedCatalogServiceServer) ClerkUpdateGroup(context.Context, *ClerkUpdateGroupRequest) (*ClerkUpdateGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClerkUpdateGroup not implemented")
}
func (UnimplementedCatalogServiceServer) ClerkDeleteGroup(context.Context, *ClerkDeleteGroupRequest) (*ClerkDeleteGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClerkDeleteGroup not implemented")
}
func (UnimplementedCatalogServiceServer) ListSuppliers(context.Context, *ListSuppliersRequest) (*ListSuppliersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSuppliers not implemented")
}
func (UnimplementedCatalogServiceServer) GetSupplier(context.Context, *GetSupplierRequest) (*GetSupplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupplier not implemented")
}
func (UnimplementedCatalogServiceServer) CreateSupplier(context.Context, *CreateSupplierRequest) (*CreateSupplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSupplier not implemented")
}
func (UnimplementedCatalogServiceServer) UpdateSupplier(context.Context, *UpdateSupplierRequest) (*UpdateSupplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSupplier not implemented")
}
func (UnimplementedCatalogServiceServer) SetPrimarySupplier(context.Context, *SetPrimarySupplierRequest) (*SetPrimarySupplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPrimarySupplier not implemented")
}
func (UnimplementedCatalogServiceServer) GetProductBySupplier(context.Context, *GetProductBySupplierRequest) (*GetProductBySupplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductBySupplier not implemented")
}

// UnsafeCatalogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatalogServiceServer will
// result in compilation errors.
type UnsafeCatalogServiceServer interface {
	mustEmbedUnimplementedCatalogServiceServer()
}

func RegisterCatalogServiceServer(s grpc.ServiceRegistrar, srv CatalogServiceServer) {
	s.RegisterService(&CatalogService_ServiceDesc, srv)
}

func _CatalogService_CustomerGetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerGetProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).CustomerGetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_CustomerGetProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).CustomerGetProduct(ctx, req.(*CustomerGetProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_ClerkListProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClerkListProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).ClerkListProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_ClerkListProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).ClerkListProducts(ctx, req.(*ClerkListProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_ClerkCreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClerkCreateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).ClerkCreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_ClerkCreateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).ClerkCreateProduct(ctx, req.(*ClerkCreateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_ClerkReadProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClerkReadProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).ClerkReadProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_ClerkReadProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).ClerkReadProduct(ctx, req.(*ClerkReadProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_ClerkUpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClerkUpdateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).ClerkUpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_ClerkUpdateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).ClerkUpdateProduct(ctx, req.(*ClerkUpdateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_ClerkDeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClerkDeleteProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).ClerkDeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_ClerkDeleteProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).ClerkDeleteProduct(ctx, req.(*ClerkDeleteProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_ClerkListGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClerkListGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).ClerkListGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_ClerkListGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).ClerkListGroups(ctx, req.(*ClerkListGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_ClerkCreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClerkCreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).ClerkCreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_ClerkCreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).ClerkCreateGroup(ctx, req.(*ClerkCreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_ClerkReadGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClerkReadGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).ClerkReadGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_ClerkReadGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).ClerkReadGroup(ctx, req.(*ClerkReadGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_ClerkUpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClerkUpdateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).ClerkUpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_ClerkUpdateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).ClerkUpdateGroup(ctx, req.(*ClerkUpdateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_ClerkDeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClerkDeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).ClerkDeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_ClerkDeleteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).ClerkDeleteGroup(ctx, req.(*ClerkDeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_ListSuppliers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSuppliersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).ListSuppliers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_ListSuppliers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).ListSuppliers(ctx, req.(*ListSuppliersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetSupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetSupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_GetSupplier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetSupplier(ctx, req.(*GetSupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_CreateSupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).CreateSupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_CreateSupplier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).CreateSupplier(ctx, req.(*CreateSupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_UpdateSupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).UpdateSupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_UpdateSupplier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).UpdateSupplier(ctx, req.(*UpdateSupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_SetPrimarySupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPrimarySupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).SetPrimarySupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_SetPrimarySupplier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).SetPrimarySupplier(ctx, req.(*SetPrimarySupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetProductBySupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductBySupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetProductBySupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_GetProductBySupplier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetProductBySupplier(ctx, req.(*GetProductBySupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CatalogService_ServiceDesc is the grpc.ServiceDesc for CatalogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CatalogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "catalog.v1.CatalogService",
	HandlerType: (*CatalogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CustomerGetProduct",
			Handler:    _CatalogService_CustomerGetProduct_Handler,
		},
		{
			MethodName: "ClerkListProducts",
			Handler:    _CatalogService_ClerkListProducts_Handler,
		},
		{
			MethodName: "ClerkCreateProduct",
			Handler:    _CatalogService_ClerkCreateProduct_Handler,
		},
		{
			MethodName: "ClerkReadProduct",
			Handler:    _CatalogService_ClerkReadProduct_Handler,
		},
		{
			MethodName: "ClerkUpdateProduct",
			Handler:    _CatalogService_ClerkUpdateProduct_Handler,
		},
		{
			MethodName: "ClerkDeleteProduct",
			Handler:    _CatalogService_ClerkDeleteProduct_Handler,
		},
		{
			MethodName: "ClerkListGroups",
			Handler:    _CatalogService_ClerkListGroups_Handler,
		},
		{
			MethodName: "ClerkCreateGroup",
			Handler:    _CatalogService_ClerkCreateGroup_Handler,
		},
		{
			MethodName: "ClerkReadGroup",
			Handler:    _CatalogService_ClerkReadGroup_Handler,
		},
		{
			MethodName: "ClerkUpdateGroup",
			Handler:    _CatalogService_ClerkUpdateGroup_Handler,
		},
		{
			MethodName: "ClerkDeleteGroup",
			Handler:    _CatalogService_ClerkDeleteGroup_Handler,
		},
		{
			MethodName: "ListSuppliers",
			Handler:    _CatalogService_ListSuppliers_Handler,
		},
		{
			MethodName: "GetSupplier",
			Handler:    _CatalogService_GetSupplier_Handler,
		},
		{
			MethodName: "CreateSupplier",
			Handler:    _CatalogService_CreateSupplier_Handler,
		},
		{
			MethodName: "UpdateSupplier",
			Handler:    _CatalogService_UpdateSupplier_Handler,
		},
		{
			MethodName: "SetPrimarySupplier",
			Handler:    _CatalogService_SetPrimarySupplier_Handler,
		},
		{
			MethodName: "GetProductBySupplier",
			Handler:    _CatalogService_GetProductBySupplier_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/catalog/v1/catalog.proto",
}
