// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/order/v1/order.proto

package order

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OrderService_ClerkGetOrder_FullMethodName                = "/order.v1.OrderService/ClerkGetOrder"
	OrderService_ClerkCreateOrder_FullMethodName             = "/order.v1.OrderService/ClerkCreateOrder"
	OrderService_ClerkCreateQuote_FullMethodName             = "/order.v1.OrderService/ClerkCreateQuote"
	OrderService_ClerkGetShipment_FullMethodName             = "/order.v1.OrderService/ClerkGetShipment"
	OrderService_ClerkGetShipmentsForOrder_FullMethodName    = "/order.v1.OrderService/ClerkGetShipmentsForOrder"
	OrderService_CustomerGetQuote_FullMethodName             = "/order.v1.OrderService/CustomerGetQuote"
	OrderService_CustomerCreateQuote_FullMethodName          = "/order.v1.OrderService/CustomerCreateQuote"
	OrderService_CustomerGetOrder_FullMethodName             = "/order.v1.OrderService/CustomerGetOrder"
	OrderService_CustomerListOrders_FullMethodName           = "/order.v1.OrderService/CustomerListOrders"
	OrderService_CustomerGetShipmentsForOrder_FullMethodName = "/order.v1.OrderService/CustomerGetShipmentsForOrder"
	OrderService_CustomerGetShipment_FullMethodName          = "/order.v1.OrderService/CustomerGetShipment"
)

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServiceClient interface {
	// ClerkGetOrder returns the order details for a given order id
	ClerkGetOrder(ctx context.Context, in *ClerkGetOrderRequest, opts ...grpc.CallOption) (*ClerkGetOrderResponse, error)
	// ClerkCreateOrder creates a new order
	ClerkCreateOrder(ctx context.Context, in *ClerkCreateOrderRequest, opts ...grpc.CallOption) (*ClerkCreateOrderResponse, error)
	// ClerkCreateQuote creates a new quote
	ClerkCreateQuote(ctx context.Context, in *ClerkCreateQuoteRequest, opts ...grpc.CallOption) (*ClerkCreateQuoteResponse, error)
	// ClerkGetShipment returns the shipment details for a given shipment id
	ClerkGetShipment(ctx context.Context, in *ClerkGetShipmentRequest, opts ...grpc.CallOption) (*ClerkGetShipmentResponse, error)
	// ClerkGetShipmentsForOrder returns a list of shipment transactions for a given order id
	ClerkGetShipmentsForOrder(ctx context.Context, in *ClerkGetShipmentsForOrderRequest, opts ...grpc.CallOption) (*ClerkGetShipmentsForOrderResponse, error)
	// CustomerGetQuote returns the quote details for a given quote
	CustomerGetQuote(ctx context.Context, in *CustomerGetQuoteRequest, opts ...grpc.CallOption) (*CustomerGetQuoteResponse, error)
	// CustomerCreateQuote creates a new quote
	CustomerCreateQuote(ctx context.Context, in *CustomerCreateQuoteRequest, opts ...grpc.CallOption) (*CustomerCreateQuoteResponse, error)
	// CustomerGetOrder returns the order details for a given order
	CustomerGetOrder(ctx context.Context, in *CustomerGetOrderRequest, opts ...grpc.CallOption) (*CustomerGetOrderResponse, error)
	// CustomerListOrders returns a list of orders for a given customer
	CustomerListOrders(ctx context.Context, in *CustomerListOrdersRequest, opts ...grpc.CallOption) (*CustomerListOrdersResponse, error)
	// CustomerGetShipmentsForOrder returns a list of shipment transactions for a given order id
	CustomerGetShipmentsForOrder(ctx context.Context, in *CustomerGetShipmentsForOrderRequest, opts ...grpc.CallOption) (*CustomerGetShipmentsForOrderResponse, error)
	CustomerGetShipment(ctx context.Context, in *CustomerGetShipmentRequest, opts ...grpc.CallOption) (*CustomerGetShipmentResponse, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) ClerkGetOrder(ctx context.Context, in *ClerkGetOrderRequest, opts ...grpc.CallOption) (*ClerkGetOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClerkGetOrderResponse)
	err := c.cc.Invoke(ctx, OrderService_ClerkGetOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) ClerkCreateOrder(ctx context.Context, in *ClerkCreateOrderRequest, opts ...grpc.CallOption) (*ClerkCreateOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClerkCreateOrderResponse)
	err := c.cc.Invoke(ctx, OrderService_ClerkCreateOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) ClerkCreateQuote(ctx context.Context, in *ClerkCreateQuoteRequest, opts ...grpc.CallOption) (*ClerkCreateQuoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClerkCreateQuoteResponse)
	err := c.cc.Invoke(ctx, OrderService_ClerkCreateQuote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) ClerkGetShipment(ctx context.Context, in *ClerkGetShipmentRequest, opts ...grpc.CallOption) (*ClerkGetShipmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClerkGetShipmentResponse)
	err := c.cc.Invoke(ctx, OrderService_ClerkGetShipment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) ClerkGetShipmentsForOrder(ctx context.Context, in *ClerkGetShipmentsForOrderRequest, opts ...grpc.CallOption) (*ClerkGetShipmentsForOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClerkGetShipmentsForOrderResponse)
	err := c.cc.Invoke(ctx, OrderService_ClerkGetShipmentsForOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) CustomerGetQuote(ctx context.Context, in *CustomerGetQuoteRequest, opts ...grpc.CallOption) (*CustomerGetQuoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CustomerGetQuoteResponse)
	err := c.cc.Invoke(ctx, OrderService_CustomerGetQuote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) CustomerCreateQuote(ctx context.Context, in *CustomerCreateQuoteRequest, opts ...grpc.CallOption) (*CustomerCreateQuoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CustomerCreateQuoteResponse)
	err := c.cc.Invoke(ctx, OrderService_CustomerCreateQuote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) CustomerGetOrder(ctx context.Context, in *CustomerGetOrderRequest, opts ...grpc.CallOption) (*CustomerGetOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CustomerGetOrderResponse)
	err := c.cc.Invoke(ctx, OrderService_CustomerGetOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) CustomerListOrders(ctx context.Context, in *CustomerListOrdersRequest, opts ...grpc.CallOption) (*CustomerListOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CustomerListOrdersResponse)
	err := c.cc.Invoke(ctx, OrderService_CustomerListOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) CustomerGetShipmentsForOrder(ctx context.Context, in *CustomerGetShipmentsForOrderRequest, opts ...grpc.CallOption) (*CustomerGetShipmentsForOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CustomerGetShipmentsForOrderResponse)
	err := c.cc.Invoke(ctx, OrderService_CustomerGetShipmentsForOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) CustomerGetShipment(ctx context.Context, in *CustomerGetShipmentRequest, opts ...grpc.CallOption) (*CustomerGetShipmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CustomerGetShipmentResponse)
	err := c.cc.Invoke(ctx, OrderService_CustomerGetShipment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations should embed UnimplementedOrderServiceServer
// for forward compatibility.
type OrderServiceServer interface {
	// ClerkGetOrder returns the order details for a given order id
	ClerkGetOrder(context.Context, *ClerkGetOrderRequest) (*ClerkGetOrderResponse, error)
	// ClerkCreateOrder creates a new order
	ClerkCreateOrder(context.Context, *ClerkCreateOrderRequest) (*ClerkCreateOrderResponse, error)
	// ClerkCreateQuote creates a new quote
	ClerkCreateQuote(context.Context, *ClerkCreateQuoteRequest) (*ClerkCreateQuoteResponse, error)
	// ClerkGetShipment returns the shipment details for a given shipment id
	ClerkGetShipment(context.Context, *ClerkGetShipmentRequest) (*ClerkGetShipmentResponse, error)
	// ClerkGetShipmentsForOrder returns a list of shipment transactions for a given order id
	ClerkGetShipmentsForOrder(context.Context, *ClerkGetShipmentsForOrderRequest) (*ClerkGetShipmentsForOrderResponse, error)
	// CustomerGetQuote returns the quote details for a given quote
	CustomerGetQuote(context.Context, *CustomerGetQuoteRequest) (*CustomerGetQuoteResponse, error)
	// CustomerCreateQuote creates a new quote
	CustomerCreateQuote(context.Context, *CustomerCreateQuoteRequest) (*CustomerCreateQuoteResponse, error)
	// CustomerGetOrder returns the order details for a given order
	CustomerGetOrder(context.Context, *CustomerGetOrderRequest) (*CustomerGetOrderResponse, error)
	// CustomerListOrders returns a list of orders for a given customer
	CustomerListOrders(context.Context, *CustomerListOrdersRequest) (*CustomerListOrdersResponse, error)
	// CustomerGetShipmentsForOrder returns a list of shipment transactions for a given order id
	CustomerGetShipmentsForOrder(context.Context, *CustomerGetShipmentsForOrderRequest) (*CustomerGetShipmentsForOrderResponse, error)
	CustomerGetShipment(context.Context, *CustomerGetShipmentRequest) (*CustomerGetShipmentResponse, error)
}

// UnimplementedOrderServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrderServiceServer struct{}

func (UnimplementedOrderServiceServer) ClerkGetOrder(context.Context, *ClerkGetOrderRequest) (*ClerkGetOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClerkGetOrder not implemented")
}
func (UnimplementedOrderServiceServer) ClerkCreateOrder(context.Context, *ClerkCreateOrderRequest) (*ClerkCreateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClerkCreateOrder not implemented")
}
func (UnimplementedOrderServiceServer) ClerkCreateQuote(context.Context, *ClerkCreateQuoteRequest) (*ClerkCreateQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClerkCreateQuote not implemented")
}
func (UnimplementedOrderServiceServer) ClerkGetShipment(context.Context, *ClerkGetShipmentRequest) (*ClerkGetShipmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClerkGetShipment not implemented")
}
func (UnimplementedOrderServiceServer) ClerkGetShipmentsForOrder(context.Context, *ClerkGetShipmentsForOrderRequest) (*ClerkGetShipmentsForOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClerkGetShipmentsForOrder not implemented")
}
func (UnimplementedOrderServiceServer) CustomerGetQuote(context.Context, *CustomerGetQuoteRequest) (*CustomerGetQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerGetQuote not implemented")
}
func (UnimplementedOrderServiceServer) CustomerCreateQuote(context.Context, *CustomerCreateQuoteRequest) (*CustomerCreateQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerCreateQuote not implemented")
}
func (UnimplementedOrderServiceServer) CustomerGetOrder(context.Context, *CustomerGetOrderRequest) (*CustomerGetOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerGetOrder not implemented")
}
func (UnimplementedOrderServiceServer) CustomerListOrders(context.Context, *CustomerListOrdersRequest) (*CustomerListOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerListOrders not implemented")
}
func (UnimplementedOrderServiceServer) CustomerGetShipmentsForOrder(context.Context, *CustomerGetShipmentsForOrderRequest) (*CustomerGetShipmentsForOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerGetShipmentsForOrder not implemented")
}
func (UnimplementedOrderServiceServer) CustomerGetShipment(context.Context, *CustomerGetShipmentRequest) (*CustomerGetShipmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerGetShipment not implemented")
}
func (UnimplementedOrderServiceServer) testEmbeddedByValue() {}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s grpc.ServiceRegistrar, srv OrderServiceServer) {
	// If the following call pancis, it indicates UnimplementedOrderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrderService_ServiceDesc, srv)
}

func _OrderService_ClerkGetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClerkGetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).ClerkGetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_ClerkGetOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).ClerkGetOrder(ctx, req.(*ClerkGetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_ClerkCreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClerkCreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).ClerkCreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_ClerkCreateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).ClerkCreateOrder(ctx, req.(*ClerkCreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_ClerkCreateQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClerkCreateQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).ClerkCreateQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_ClerkCreateQuote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).ClerkCreateQuote(ctx, req.(*ClerkCreateQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_ClerkGetShipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClerkGetShipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).ClerkGetShipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_ClerkGetShipment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).ClerkGetShipment(ctx, req.(*ClerkGetShipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_ClerkGetShipmentsForOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClerkGetShipmentsForOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).ClerkGetShipmentsForOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_ClerkGetShipmentsForOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).ClerkGetShipmentsForOrder(ctx, req.(*ClerkGetShipmentsForOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_CustomerGetQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerGetQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CustomerGetQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_CustomerGetQuote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CustomerGetQuote(ctx, req.(*CustomerGetQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_CustomerCreateQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerCreateQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CustomerCreateQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_CustomerCreateQuote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CustomerCreateQuote(ctx, req.(*CustomerCreateQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_CustomerGetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerGetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CustomerGetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_CustomerGetOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CustomerGetOrder(ctx, req.(*CustomerGetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_CustomerListOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerListOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CustomerListOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_CustomerListOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CustomerListOrders(ctx, req.(*CustomerListOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_CustomerGetShipmentsForOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerGetShipmentsForOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CustomerGetShipmentsForOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_CustomerGetShipmentsForOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CustomerGetShipmentsForOrder(ctx, req.(*CustomerGetShipmentsForOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_CustomerGetShipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerGetShipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CustomerGetShipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_CustomerGetShipment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CustomerGetShipment(ctx, req.(*CustomerGetShipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderService_ServiceDesc is the grpc.ServiceDesc for OrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.v1.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClerkGetOrder",
			Handler:    _OrderService_ClerkGetOrder_Handler,
		},
		{
			MethodName: "ClerkCreateOrder",
			Handler:    _OrderService_ClerkCreateOrder_Handler,
		},
		{
			MethodName: "ClerkCreateQuote",
			Handler:    _OrderService_ClerkCreateQuote_Handler,
		},
		{
			MethodName: "ClerkGetShipment",
			Handler:    _OrderService_ClerkGetShipment_Handler,
		},
		{
			MethodName: "ClerkGetShipmentsForOrder",
			Handler:    _OrderService_ClerkGetShipmentsForOrder_Handler,
		},
		{
			MethodName: "CustomerGetQuote",
			Handler:    _OrderService_CustomerGetQuote_Handler,
		},
		{
			MethodName: "CustomerCreateQuote",
			Handler:    _OrderService_CustomerCreateQuote_Handler,
		},
		{
			MethodName: "CustomerGetOrder",
			Handler:    _OrderService_CustomerGetOrder_Handler,
		},
		{
			MethodName: "CustomerListOrders",
			Handler:    _OrderService_CustomerListOrders_Handler,
		},
		{
			MethodName: "CustomerGetShipmentsForOrder",
			Handler:    _OrderService_CustomerGetShipmentsForOrder_Handler,
		},
		{
			MethodName: "CustomerGetShipment",
			Handler:    _OrderService_CustomerGetShipment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/order/v1/order.proto",
}
